{
  "gsr-mission-model": {
    "prefix": "gsr-mission-model",
    "body": [
      "export interface Mission {",
      "  id?: number;",
      "  title: string;",
      "  reward: number;",
      "  active: boolean;",
      "}"
    ],
    "description": ""
  },
  "gsr-nest-missions-service": {
    "prefix": "gsr-nest-missions-service",
    "body": [
      "export class MissionsService {",
      "  constructor(private missionsRepository: MissionsRepository) {}",
      "",
      "  getMissions() {",
      "    return this.missionsRepository.getList();",
      "  }",
      "}"
    ],
    "description": "gsr-nest-missions-service"
  },
  "gsr-nest-missions-controller": {
    "prefix": "gsr-nest-missions-controller",
    "body": [
      "export class MissionsController {",
      "",
      "  constructor(private missionsService: MissionsService) {}",
      "",
      "  @Get()",
      "  async getMissions() {",
      "    return this.missionsService.getMissions();",
      "  }",
      "}"
    ],
    "description": "gsr-nest-missions-controller"
  },
  "gsr-ng-missions-service": {
		"prefix": "gsr-ng-missions-service",
		"body": [
			"export class MissionsService {",
			"  constructor(private httpClient: HttpClient) {}",
			"",
			"  getMissions() {",
			"    return this.httpClient",
			"      .get<{data: Mission[]}>('http://localhost:3000/missions')",
			"      .pipe(map(response => response.data));",
			"  }",
			"}"
		],
		"description": "gsr-ng-missions-service"
	},
  "gsr-nest-data-interceptor": {
		"prefix": "gsr-nest-data-interceptor",
		"body": [
			"export class DataInterceptor implements NestInterceptor {",
			"  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {",
			"    return next.handle().pipe(",
			"      map(data => {",
			"        return {",
			"          data: classToPlain(data)",
			"        };",
			"      })",
			"    );",
			"  }",
			"}"
		],
		"description": "gsr-nest-data-interceptor"
	},
  "gsr-ng-homepage-ts": {
    "prefix": "gsr-ng-homepage-ts",
    "body": [
      "export class HomePage implements OnInit {",
      "  missions: Observable<Mission[]>;",
      "",
      "  constructor(private missionsService: MissionsService) {}",
      "",
      "  ngOnInit() {",
      "    this.missions = this.missionsService.getMissions();",
      "  }",
      "}"
    ],
    "description": "gsr-ng-homepage-ts"
  },
	"gsr-nest-missions-service-get": {
		"prefix": "gsr-nest-missions-service-get",
		"body": [
			"getMission(id: number) {",
			"  return this.missionsRepository.get(id);",
			"}"
		],
		"description": "gsr-nest-missions-service-get"
	},
	"gsr-nest-missions-controller-get": {
		"prefix": "gsr-nest-missions-controller-get",
		"body": [
			" @Get(':id')",
			"  async getMission(@Param('id') id: number) {",
			"    return this.missionsService.getMission(id);",
			"  }"
		],
		"description": "gsr-nest-missions-controller-get"
	},
  "gsr-nest-data-pipe": {
    "prefix": "gsr-nest-data-pipe",
    "body": [
      "export class DataPipe implements PipeTransform {",
      "  transform(value: any, metadata: ArgumentMetadata) {",
      "    const { metatype } = metadata;",
      "    const convertedValue = plainToClass(metatype, value);",
      "    return convertedValue;",
      "  }",
      "}"
    ],
    "description": "gsr-nest-data-pipe"
  },
  "gsr-ng-missions-service-getbyid": {
		"prefix": "gsr-ng-missions-service-getbyid",
		"body": [
			"getMissionById(id: number) {",
			"  return this.httpClient",
			"    .get<{data: Mission}>('http://localhost:3000/missions/' + id)",
			"    .pipe(map(response => response.data));",
			"}"
		],
		"description": "gsr-ng-missions-service-getbyid"
	},
  "gsr-ng-homepage-openMission": {
		"prefix": "gsr-ng-homepage-openMission",
		"body": [
			"async openMission(id: number) {",
			"  const modal = await this.modalController.create({",
			"    component: MissionFormComponent,",
			"    componentProps: { id }",
			"  });",
			"  await modal.present();",
			"  const { data = {} } = await modal.onDidDismiss();",
			"  if (data.refreshMissions) {",
			"    this.missions = this.missionsService.getMissions();",
			"  }",
			"}"
		],
		"description": "gsr-ng-homepage-openMission"
	},
  "gsr-ng-missionform-ts": {
    "prefix": "gsr-ng-missionform-ts",
    "body": [
      "export class MissionFormComponent implements OnInit {",
      "  mission$: Observable<Mission>;",
      "",
      "  constructor(",
      "    private navParams: NavParams,",
      "    private missionsService: MissionsService,",
      "    private modalCtrl: ModalController",
      "  ) {}",
      "",
      "  ngOnInit() {",
      "    const id = this.navParams.data.id;",
      "    if (id) {",
      "      this.mission$ = this.missionsService.getMissionById(id);",
      "    } else {",
      "      this.mission$ = of({ active: false } as any);",
      "    }",
      "  }",
      "",
      "  close() {",
      "    this.modalCtrl.dismiss({",
      "      refreshMissions: false",
      "    });",
      "  }",
      "",
      "  submit(mission: Mission) {",
      "    console.log(mission);",
      "  }",
      "}"
    ],
    "description": "gsr-ng-missionform-ts"
  },
  "gsr-nest-missions-service-createupdatedelete": {
    "prefix": "gsr-nest-missions-service-createupdatedelete",
    "body": [
      "createMission(mission: MissionEntity) {",
      "    return this.missionsRepository.create(mission);",
      "  }",
      "",
      "  async updateMission(id: number, mission: MissionEntity) {",
      "    const current = await this.getMission(id);",
      "    if (!current) {",
      "      return null;",
      "    }",
      "    mission.createdAt = current.createdAt;",
      "    mission.createdBy = current.createdBy;",
      "    return this.missionsRepository.update(id, mission);",
      "  }",
      "",
      "  deleteMission(id: number) {",
      "    return this.missionsRepository.delete(id);",
      "  }"
    ],
    "description": "gsr-nest-missions-service-createupdatedelete"
  },
  "gsr-nest-missions-controller-createupdatedelete": {
    "prefix": "gsr-nest-missions-controller-createupdatedelete",
    "body": [
      "@Post()",
      "async createMission(@Body() mission: MissionEntity) {",
      "  return this.missionsService.createMission(mission);",
      "}",
      "",
      "@Put(':id')",
      "async updateMission(@Param('id') id: number, @Body() mission: MissionEntity) {",
      "  return this.missionsService.updateMission(id, mission);",
      "}",
      "",
      "@Delete(':id')",
      "async deleteMission(@Param('id') id: number) {",
      "  return this.missionsService.deleteMission(id);",
      "}"
    ],
    "description": "gsr-nest-missions-controller-createupdatedelete"
  },
	"gsr-ng-homepage-newmission": {
		"prefix": "gsr-ng-homepage-newmission",
		"body": [
			"async newMission() {",
			"  const modal = await this.modalController.create({",
			"    component: MissionFormComponent",
			"  });",
			"  await modal.present();",
			"  const { data } = await modal.onDidDismiss();",
			"  if (data.refreshMissions) {",
			"    this.missions = this.missionsService.getMissions();",
			"  }",
			"}"
		],
		"description": "gsr-ng-homepage-newmission"
	},
	"gsr-ng-missions-service-createupdatedelete": {
		"prefix": "gsr-ng-missions-service-createupdatedelete",
		"body": [
			"createMission(mission: Mission) {",
			"  return this.httpClient",
			"    .post<Mission>(`http://localhost:3000/missions`, mission)",
			"    .toPromise().catch(response => { throw response.error; });",
			"}",
			"",
			"updateMission(mission: Mission) {",
			"  return this.httpClient",
			"    .put<Mission>(`http://localhost:3000/missions/${mission.id}`, mission)",
			"    .toPromise().catch(response => { throw response.error; });",
			"}",
			"",
			"deleteMission(mission: Mission) {",
			"  return this.httpClient",
			"    .delete<Mission>(`http://localhost:3000/missions/${mission.id}`)",
			"    .toPromise().catch(response => { throw response.error; });",
			"}"
		],
		"description": "gsr-ng-missions-service-createupdatedelete"
	},
	"gsr-ng-missionform-submit-method": {
		"prefix": "gsr-ng-missionform-submit-method",
		"body": [
			"async submit(mission: Mission) {",
			"  try {",
			"    if (mission.id) {",
			"      await this.missionsService.updateMission(mission);",
			"    } else {",
			"      await this.missionsService.createMission(mission);",
			"    }",
			"    this.modalCtrl.dismiss({",
			"      refreshMissions: true",
			"    });",
			"  } catch (error) {",
			"    const alert = await this.alertController.create({",
			"      header: 'API Error',",
			"      subHeader: error.error,",
			"      message: error.message,",
			"      buttons: ['OK']",
			"    });",
			"    await alert.present();",
			"  }",
			"}"
		],
		"description": "gsr-ng-missionform-submit-method"
  },
  "gsr-ng-missionform-delete": {
		"prefix": "gsr-ng-missionform-delete",
		"body": [
			"async delete(mission: Mission) {",
			"    const alert = await this.alertController.create({",
			"      header: 'Delete Mission?',",
			"      message: 'Are you sure you want to delete this mission?',",
			"      buttons: [",
			"        {",
			"          text: 'No',",
			"          role: 'cancel',",
			"          cssClass: 'secondary'",
			"        },",
			"        {",
			"          text: 'Yes',",
			"          handler: async () => {",
			"            try {",
			"              await this.missionsService.deleteMission(mission);",
			"              this.modalCtrl.dismiss({",
			"                refreshMissions: true",
			"              });",
			"            } catch (error) {",
			"              const deleteAlert = await this.alertController.create({",
			"                header: 'API Error',",
			"                subHeader: error.error,",
			"                message: error.message,",
			"                buttons: ['OK']",
			"              });",
			"              await deleteAlert.present();",
			"            }",
			"          }",
			"        }",
			"      ]",
			"    });",
			"    await alert.present();",
			"  }"
		],
		"description": "gsr-ng-missionform-delete"
	},
  "gsr-ng-missions-service-handleerror": {
		"prefix": "gsr-ng-missions-service-handleerror",
		"body": [
			"handleError(response: any) {",
			"    const { error } = response;",
			"    if (error.statusCode === 400) {",
			"      let message = '';",
			"      error.message.forEach((msg: any) => {",
			"        const keys = Object.keys(msg.constraints);",
			"        keys.forEach(k => {",
			"          message += msg.constraints[k] + '<br />';",
			"        });",
			"      });",
			"      throw {message};",
			"    }",
			"    throw error;",
			"  }"
		],
		"description": "gsr-ng-missions-service-handleerror"
  },
  "gsr-ng-auth-interceptor": {
		"prefix": "gsr-ng-auth-interceptor",
		"body": [
			"import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';",
			"import { Injectable } from '@angular/core';",
			"import { Observable } from 'rxjs';",
			"",
			"@Injectable()",
			"export class AuthInterceptor implements HttpInterceptor {",
			"  constructor() {}",
			"",
			"  intercept(",
			"    request: HttpRequest<any>,",
			"    next: HttpHandler",
			"  ): Observable<HttpEvent<any>> {",
			"    const authToken = window.localStorage.getItem('auth-token');",
			"",
			"    if (!authToken) {",
			"      return next.handle(request);",
			"    }",
			"",
			"    const newRequest = request.clone({",
			"      setHeaders: {",
			"        Authorization: 'Bearer ' + authToken",
			"      }",
			"    });",
			"",
			"    return next.handle(newRequest);",
			"  }",
			"}",
			""
		],
		"description": "gsr-ng-auth-interceptor"
	},
	"gsr-nest-authguard": {
		"prefix": "gsr-nest-authguard",
		"body": [
			"export class AuthGuard implements CanActivate {",
			"  constructor(private reflector: Reflector) {}",
			"",
			"  canActivate(context: ExecutionContext): boolean {",
			"    const requiredRoles =",
			"      this.reflector.get<string[]>('roles', context.getHandler()) || [];",
			"",
			"    if (requiredRoles.length === 0) {",
			"      return true;",
			"    }",
			"",
			"    const request = context.switchToHttp().getRequest();",
			"",
			"    if (",
			"      !request.headers.authorization ||",
			"      !request.headers.authorization.startsWith('Bearer ')",
			"    ) {",
			"      return false;",
			"    }",
			"",
			"    const token = request.headers.authorization.split(' ')[1];",
			"",
			"    const userRoles = [];",
			"",
			"    if (token === 'user-token') {",
			"      userRoles.push('user');",
			"    }",
			"    if (token === 'admin-token') {",
			"      userRoles.push('user', 'admin');",
			"    }",
			"",
			"    const hasRole = userRoles.some(role => requiredRoles.indexOf(role) > -1);",
			"    return hasRole;",
			"  }",
			"}"
		],
		"description": "gsr-nest-authguard"
	}
}
